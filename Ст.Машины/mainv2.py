import os
import errno
from datetime import datetime
import json
import telebot
from telebot import types
import sqlite3
import time
bot = telebot.TeleBot('5238517183:AAHkdru03SWwWiPpvzSNFGLXRyXhWKl2wnw')


@bot.message_handler(commands=['start'])
def start(message):
    markup_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    btn2 = types.KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
    markup_main.add(btn1, btn2)

    bot.delete_message(message.chat.id, message.message_id)
    bot.send_message(message.chat.id, text='üëã–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é', reply_markup=markup_main)


def make_sure_path_exists(path):
    try: os.makedirs(path)
    except OSError as exception:
        if exception.errno != errno.EEXIST:
            raise

def convert_to_binary_data(filename):
    file = open(filename, 'rb')
    blob_data = file.read()
    return blob_data

def convert_to_not_binary_data(data, filename):
    file = open(filename, 'wb')
    photo_name = file.write(data)
    return blob_data


@bot.message_handler(content_types=['text'])
def func(message):
    message_arr = message.text.split()

    markup_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üì∏ –û—Ç—á–µ—Ç")
    btn2 = types.KeyboardButton("üìú –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç")
    btn3 = types.KeyboardButton("üó£Ô∏è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç–¥–µ–ª")
    btn4 = types.KeyboardButton("üßæ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã")
    btn5 = types.KeyboardButton("üìë –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã")
    markup_main.add(btn1, btn2, btn3, btn4, btn5)

    markup_return = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup_return.add(button1)

    markup_reg = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1_reg = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    markup_reg.add(button1)

    if message.text == "üì∏ –û—Ç—á–µ—Ç":
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, text='–ü—Ä–∏—à–ª–∏—Ç–µ –≤ —á–∞—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ –ø—Ä–∏–º–µ—Ä—É –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∞ –ø–æ—Ç–æ–º –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n–û–ø–∏—Å–∞–Ω–∏–µ\n(–í–ú)–ë–∞–ª–∞—à–∏—Ö–∞ –Ω–æ–≤–∞—è –ü–∞–≤–ª–∏–Ω–∞ —É–ª.–¢—Ä–æ–∏—Ü–∫–∞—è –¥2 –∫–≤186 –ø–æ–¥3 —ç—Ç13. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä.–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞–Ω–Ω—É. –°–∏ –Ω—É–∂–µ–Ω —Å–µ–≥–æ–¥–Ω—è', reply_markup=markup_return)
        make_sure_path_exists(str(message.chat.id))

    elif message.text == "üìú –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç":  # –ì–æ–≤–Ω–æ
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, text=f"–ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã—Ö –∞–∫—Ç–æ–≤:\n_–¢–£–¢ –î–û–õ–ñ–Ω–´ –ë–´–¢–¨ –§–û–¢–û–ì–†–ê–§–ò–ò_", reply_markup=markup_return)

    elif message.text == "üßæ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã":
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, "–ü—Ä–∏—à–ª–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Å–≤–æ–µ–π —Ä–∞–±–æ—Ç—ã. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–º–µ—Ä—É:\n\n–ì—Ä–∞—Ñ–∏–∫\n–†–∞–±\n*–î–Ω–∏ –º–µ—Å—è—Ü–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã*\n–í—ã—Ö\n*–î–Ω–∏ –º–µ—Å—è—Ü–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª—ã*", reply_markup=markup_return)

    elif message.text == "üó£Ô∏è –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç–¥–µ–ª":  # –ì–æ–≤–Ω–æ
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, text="–î–ª—è —Å–≤—è–∑–∏ —Å –∫—É—Ä–∞—Ç–æ—Ä–æ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å—é–¥–∞: \n@finotdelSC",reply_markup=markup_return)

    elif message.text == "üìë –ü—Ä–∞–≤–∏–ª–∞ —Ä–∞–±–æ—Ç—ã": # –ì–æ–≤–Ω–æ
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)
        with open('Rules.txt', 'r',encoding='utf8') as new_file:
            rule = new_file.read()
        bot.send_message(message.chat.id, text=f"–ü–µ—Ä–µ—á–µ–Ω—å –ø—Ä–∞–≤–∏–ª —Ä–∞–±–æ—Ç—ã:\n{rule}",reply_markup=markup_return)

    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup_main)

    elif str(message_arr[0]) == "–û–ø–∏—Å–∞–Ω–∏–µ":
        count = 1
        message_text = ''
        while count < len(message_arr):
            message_text += str(message_arr[count]) + ' '
            count += 1
        file = open('file.txt', 'w')
        file.write(message_text)
        file.close()

    elif message.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)
        bot.send_message(message.chat.id, text='–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –ø–æ –ø—Ä–∏–º–µ—Ä—É:\n\n–§–ò–û\n*–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—á—Å—Ç–≤–æ*')

    elif message_arr[0] == '–§–ò–û':
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)

        id = str(message.chat.id)
        text = message_arr[1] + ' ' + message_arr[2] + ' ' +  message_arr[3]
        base = sqlite3.connect('Registracia.db')
        cur = base.cursor()
        base.execute('CREATE TABLE IF NOT EXISTS UserInfo(id, FIO)')
        base.commit()
        cur.execute('INSERT INTO UserInfo VALUES(?, ?)', (id, text))
        base.commit()
        bot.send_message(message.chat.id, text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞!', reply_markup=markup_return)

    elif message.text == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        bot.delete_message(message.chat.id, message.message_id - 1)
        bot.delete_message(message.chat.id, message.message_id)

        id = str(message.chat.id)
        base = sqlite3.connect('Registracia.db')
        cur = base.cursor()
        info_id_list = cur.execute('SELECT id FROM UserInfo').fetchall()

        count = 0
        while count < len(info_id_list):
            info_id = str(info_id_list[count][0])
            if id == info_id:
                true = 1
                break
            count += 1
        if true == 1:
            bot.send_message(message.chat.id, text='–£–∑–Ω–∞—é –≤–∞—Å', reply_markup=markup_return)
        else:
            bot.send_message(message.chat.id, text='–ü–µ—Ä–≤—ã–π —Ä–∞–∑ –≤–∞—Å –≤–∏–∂—É. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', reply_markup=markup_reg)

    elif message_arr[0] == "–ì—Ä–∞—Ñ–∏–∫":
        count = 2
        while count < len(message_arr):
            if message_arr[count] == '–í—ã—Ö':
                break
            count += 1
        work_day = message_arr[2:count]
        rest_day = message_arr[count + 1:]
        # –≠—Ç–æ –Ω—É–∂–Ω–æ –≤ –±–¥ –∑–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ –∫—É–¥–∞-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?



    else:
            bot.delete_message(message.chat.id, message.message_id - 1)
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, text="–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É.", reply_markup=markup_return)


@bot.message_handler(content_types=["photo"])
def handle_docs_photo(message):
    markup_return = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup_return.add(button1)

    raw = message.photo[2].file_id
    name = raw + ".jpg"
    file_info = bot.get_file(message.photo[2].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    with open(name, 'wb') as new_file:
        new_file.write(downloaded_file)

    id = str(message.chat.id)
    date_time = str(datetime.now())[:-7]
    photo = convert_to_binary_data(name)
    text = open('file.txt', 'r')
    text = text.read()


    base = sqlite3.connect('Registracia.db')
    cur = base.cursor()
    id_list = cur.execute('SELECT id FROM UserInfo').fetchall()
    name_list = cur.execute('SELECT FIO FROM UserInfo').fetchall()
    count = 0
    while count < len(id_list):
        info_id = str(id_list[count][0])
        if id == info_id:
            true = 1
            break
        count += 1
    table_name = str(name_list[count][0].replace(' ', ''))

    base = sqlite3.connect('test.db')
    cur = base.cursor()
    base.execute('CREATE TABLE IF NOT EXISTS ' + table_name + '(datetime TEXT, photo BLOB, text TEXT)')
    base.commit()
    cur.execute('INSERT INTO ' + table_name + ' VALUES(?, ?, ?)', (date_time, photo, text))
    base.commit()
    os.remove(name)
    os.remove('file.txt')
    bot.delete_message(message.chat.id, message.message_id - 2)
    bot.delete_message(message.chat.id, message.message_id - 1)
    bot.delete_message(message.chat.id, message.message_id)
    bot.send_message(message.chat.id, text="–û—Ç—á–µ—Ç –∑–∞–ø–∏—Å–∞–Ω", reply_markup=markup_return)


bot.polling(none_stop=True)
